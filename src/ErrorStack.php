<?php

/**
 * @author Jared King <j@jaredtking.com>
 *
 * @see http://jaredtking.com
 *
 * @copyright 2015 Jared King
 * @license MIT
 */

namespace Pulsar;

use ArrayAccess;
use ArrayIterator;
use Countable;
use Infuse\Locale;
use IteratorAggregate;

/**
 * Holds error messages generated by models, like validation errors.
 */
class ErrorStack implements IteratorAggregate, Countable, ArrayAccess
{
    /**
     * @var array
     */
    private $stack;

    /**
     * @var Locale|null
     */
    private $locale;

    /**
     * @var int
     */
    private $pointer;

    public function __construct()
    {
        $this->stack = [];
        $this->pointer = 0;
    }

    /**
     * Sets the locale service.
     *
     * @param Locale $locale
     *
     * @return self
     */
    public function setLocale(Locale $locale)
    {
        $this->locale = $locale;

        return $this;
    }

    /**
     * Gets the locale service.
     *
     * @return Locale|null
     */
    public function getLocale()
    {
        return $this->locale;
    }

    /**
     * Adds an error message to the stack.
     *
     * @param array|string $error
     *                            - error: error code
     *                            - params: array of parameters to be passed to message
     *
     * @return self
     */
    public function push($error)
    {
        $this->stack[] = $this->sanitize($error);

        return $this;
    }

    /**
     * Gets all of the errors on the stack and also attempts
     * translation using the Locale class.
     *
     * @param string $locale optional locale
     *
     * @return array error messages
     */
    public function all($locale = '')
    {
        $messages = [];
        foreach ($this->stack as $error) {
            $messages[] = $this->parse($error, $locale)['message'];
        }

        return $messages;
    }

    /**
     * @deprecated
     *
     * Gets all of the errors on the stack and also attempts
     * translation using the Locale class
     *
     * @param string $locale optional locale
     *
     * @return array errors
     */
    public function errors($locale = '')
    {
        $errors = [];
        foreach ($this->stack as $error) {
            $errors[] = $this->parse($error, $locale);
        }

        return $errors;
    }

    /**
     * @deprecated
     *
     * Gets the messages of errors on the stack
     *
     * @param string $locale optional locale
     *
     * @return array errors
     */
    public function messages($locale = '')
    {
        return $this->all($locale);
    }

    /**
     * Gets an error for a specific parameter on the stack.
     *
     * @param string $value value we are searching for
     * @param string $param parameter name
     *
     * @return array|bool
     */
    public function find($value, $param = 'field')
    {
        foreach ($this->errors() as $error) {
            if (array_value($error['params'], $param) === $value) {
                return $error;
            }
        }

        return false;
    }

    /**
     * Checks if an error exists with a specific parameter on the stack.
     *
     * @param string $value value we are searching for
     * @param string $param parameter name
     *
     * @return bool
     */
    public function has($value, $param = 'field')
    {
        return $this->find($value, $param) !== false;
    }

    /**
     * Clears the error stack.
     *
     * @return self
     */
    public function clear()
    {
        $this->stack = [];

        return $this;
    }

    /**
     * Formats an incoming error message.
     *
     * @param array|string $error
     *
     * @return array
     */
    private function sanitize($error)
    {
        if (!is_array($error)) {
            $error = ['error' => $error];
        }

        if (!isset($error['params'])) {
            $error['params'] = [];
        }

        return $error;
    }

    /**
     * Parses an error message before displaying it.
     *
     * @param array  $error
     * @param string $locale
     *
     * @return array
     */
    private function parse(array $error, $locale = '')
    {
        // attempt to translate error into a message
        // when the locale service is available
        if (!isset($error['message'])) {
            if ($this->locale) {
                $error['message'] = $this->locale->t($error['error'], $error['params'], $locale);
            } else {
                $error['message'] = $error['error'];
            }
        }

        return $error;
    }

    //////////////////////////
    // IteratorAggregate Interface
    //////////////////////////

    public function getIterator()
    {
        return new ArrayIterator($this->stack);
    }

    //////////////////////////
    // Countable Interface
    //////////////////////////

    /**
     * Get total number of models matching query.
     *
     * @return int
     */
    public function count()
    {
        return count($this->stack);
    }

    /////////////////////////////
    // ArrayAccess Interface
    /////////////////////////////

    public function offsetExists($offset)
    {
        return isset($this->stack[$offset]);
    }

    public function offsetGet($offset)
    {
        if (!$this->offsetExists($offset)) {
            throw new \OutOfBoundsException("$offset does not exist on this ErrorStack");
        }

        return $this->stack[$offset];
    }

    public function offsetSet($offset, $error)
    {
        if (!is_numeric($offset)) {
            throw new \Exception('Can only perform set on numeric indices');
        }

        $this->stack[$offset] = $this->sanitize($error);
    }

    public function offsetUnset($offset)
    {
        unset($this->stack[$offset]);
    }
}
